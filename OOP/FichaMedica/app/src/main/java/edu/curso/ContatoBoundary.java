package edu.curso;

/*
 * This source file was generated by the Gradle 'init' task
 */

import java.time.format.DateTimeFormatter;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.scene.control.*;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.RowConstraints;
import javafx.util.Callback;

public class ContatoBoundary implements Boundary {
    private ContatoControl control = new ContatoControl();
    private TextField txtNome = new TextField();
    private TextField txtTelefone = new TextField();
    private TextField txtEmail = new TextField();
    private DatePicker dtaNascimento = new DatePicker();
    private TableView<Contato> tabela = new TableView<>();
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    

    public void bindings() {         
        Bindings.bindBidirectional(control.nomeProperty(), txtNome.textProperty());
        Bindings.bindBidirectional(control.telefoneProperty(), txtTelefone.textProperty());
        Bindings.bindBidirectional(control.emailProperty(), txtEmail.textProperty());
        Bindings.bindBidirectional(control.nascimentoProperty(), dtaNascimento.valueProperty());
    }

    public void tableCreation() {
        TableColumn<Contato, String> col1 = new TableColumn<>("Nome");
        col1.setCellValueFactory(c -> new ReadOnlyStringWrapper(c.getValue().getNome()));

        TableColumn<Contato, String> col2 = new TableColumn<>("Telefone");
        col2.setCellValueFactory(c -> new ReadOnlyStringWrapper(c.getValue().getTelefone()));

        TableColumn<Contato, String> col3 = new TableColumn<>("Email");
        col3.setCellValueFactory(c -> new ReadOnlyStringWrapper(c.getValue().getEmail()));

        // TableColumn<Contato, LocalDate> col4 = new TableColumn<>("Nascimento");
        // col4.setCellValueFactory( c -> 
        //     new ReadOnlyObjectWrapper<LocalDate>( c.getValue().getNascimento() ));
        TableColumn<Contato, String> col4 = new TableColumn<>("Nascimento");
        col4.setCellValueFactory(c -> {
            String strNascimento = dateFormatter.format(c.getValue().getNascimento());
            return new ReadOnlyStringWrapper(strNascimento);
        });
        TableColumn<Contato, Void> col5 = new TableColumn<>("Ações");
        Callback<TableColumn<Contato, Void>, TableCell<Contato, Void>> cellFactory
                = (tablecolumn) -> new TableCell<>() {
                    private Button btnApagar = new Button("Apagar");
                    {
                        btnApagar.setDisable( true );
                        btnApagar.setOnAction( e -> {
                            Contato c = control.listaProperty().get( getIndex() );
                            control.remover( c );
                        });
                    }
                    @Override
                    public void updateItem(Void item, boolean empty) {
                        if (empty) {
                            setGraphic(null);
                        } else {
                            setGraphic( btnApagar );
                        }
                    }
                };
        col5.setCellFactory( cellFactory );
        tabela.getColumns().addAll( col1, col2, col3, col4, col5 );
        tabela.setItems( control.listaProperty() );

        tabela.getSelectionModel().selectedItemProperty().addListener(
            (obs, antigo, novo) -> { 
                System.out.println("Contato selecionado ==> " + novo);
                control.contatoParaTela( novo );
            }
        );
    }

    public Pane render() { 
        BorderPane panePrincipal = new BorderPane();
        GridPane paneForm = new GridPane();
        HBox paneBotoes = new HBox();

        // Faz as ligações entre propriedades do Control
        bindings();

        // Gera as colunas da tabela
        tableCreation();

        ColumnConstraints colLabel = new ColumnConstraints();
        colLabel.setPercentWidth(30);

        ColumnConstraints colTextField = new ColumnConstraints();
        colTextField.setPercentWidth(70);

        RowConstraints linha = new RowConstraints();
        linha.setPrefHeight(50);

        paneForm.getColumnConstraints().addAll(colLabel, colTextField);
        paneForm.getRowConstraints().addAll(linha, linha, linha, linha, linha);

        paneForm.add( new Label("Nome"), 0, 0);
        paneForm.add( txtNome, 1, 0);
        paneForm.add( new Label("Telefone:"), 0, 1);
        paneForm.add( txtTelefone, 1, 1);
        paneForm.add( new Label("Email:"), 0, 2);
        paneForm.add( txtEmail, 1, 2);
        paneForm.add( new Label("Nascimento:"), 0, 3);
        paneForm.add( dtaNascimento, 1, 3);

        Button btnSalvar = new Button("Salvar");

        btnSalvar.setOnAction( evento -> {
            control.cadastrar();
            new Alert(AlertType.INFORMATION, 
                "Contato gravado com sucesso", 
                            ButtonType.OK).show();
        });

        Button btnPesquisar = new Button("Pesquisar");

        btnPesquisar.setOnAction( evento -> {
            control.pesquisarContato();
        });

        paneBotoes.getChildren().addAll(btnSalvar, btnPesquisar);

        paneForm.add( paneBotoes, 0, 4, 2, 1);

        panePrincipal.setTop( paneForm );
        panePrincipal.setCenter( tabela );

        return panePrincipal;
    }
}