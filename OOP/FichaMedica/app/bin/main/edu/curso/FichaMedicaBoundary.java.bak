package edu.curso;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.RowConstraints;
import javafx.stage.Stage;
import javafx.util.converter.LongStringConverter;

public class FichaMedicaBoundary extends Application{
    private FichaMedicaControl control = new FichaMedicaControl();
    private TextField txtId = new TextField();
    private TextField txtTipoSanguineo = new TextField();
    private TextField txtPeso = new TextField();
    private TextField txtAlergias = new TextField();

    public void bindings() { 
        // 1. Cria o TextFormatter com conversor
        TextFormatter<Long> idFormatter = new TextFormatter<>(new LongStringConverter());

        // 2. Aplica ao campo de texto
        txtId.setTextFormatter(idFormatter);

        // 3. Cria uma propriedade intermediária compatível (ObjectProperty<Long>)
        ObjectProperty<Long> intermediateId = new SimpleObjectProperty<>();

        // 4. Faz binding bidirecional entre control.idProperty() e intermediateId com conversão
        intermediateId.bindBidirectional(control.idProperty().asObject());

        // 5. Faz binding entre o formatter e a propriedade intermediária
        idFormatter.valueProperty().bindBidirectional(intermediateId);
        Bindings.bindBidirectional(control.tipoSanguineoProperty(), txtTipoSanguineo.textProperty());

        // 1. Cria o TextFormatter com conversor
        TextFormatter<Long> pesoFormatter = new TextFormatter<>(new LongStringConverter());

        // 2. Aplica ao campo de texto
        txtPeso.setTextFormatter(pesoFormatter);

        // 3. Cria uma propriedade intermediária compatível (ObjectProperty<Long>)
        ObjectProperty<Long> intermediatePeso = new SimpleObjectProperty<>();

        // 4. Faz binding bidirecional entre control.idProperty() e intermediateId com conversão
        intermediatePeso.bindBidirectional(control.idProperty().asObject());

        // 5. Faz binding entre o formatter e a propriedade intermediária
        pesoFormatter.valueProperty().bindBidirectional(intermediateId);        
        Bindings.bindBidirectional(control.alergiasProperty(), txtAlergias.textProperty());
    }

    public void start(Stage stage) { 
        BorderPane panePrincipal = new BorderPane();
        GridPane paneForm = new GridPane();
        HBox paneBotoes = new HBox();

        // Faz as ligações entre propriedades do Control
        bindings();

        ColumnConstraints colLabel = new ColumnConstraints();
        colLabel.setPercentWidth(30);

        ColumnConstraints colTextField = new ColumnConstraints();
        colTextField.setPercentWidth(70);

        RowConstraints linha = new RowConstraints();
        linha.setPrefHeight(50);

        paneForm.getColumnConstraints().addAll(colLabel, colTextField);
        paneForm.getRowConstraints().addAll(linha, linha, linha, linha, linha);

        Scene scn = new Scene(panePrincipal, 800, 600);

        Label lblId = new Label("Nome");
        lblId.setStyle("-fx-background-color: 'yellow'; -fx-font-size: 25px; -fx-width: '100%'; -fx-height: '100%'; -fx-rotate: 45");
        paneForm.add( lblId, 0, 0);
        paneForm.add( txtPeso, 1, 0);
        paneForm.add( new Label("Telefone:"), 0, 1);
        paneForm.add( txtTipoSanguineo, 1, 1);
        paneForm.add( new Label("Email:"), 0, 2);
        paneForm.add( txtPeso, 1, 2);
        paneForm.add( new Label("Nascimento:"), 0, 3);
        paneForm.add( txtAlergias, 1, 3);

        Button btnSalvar = new Button("Salvar");

        btnSalvar.setOnAction( evento -> {
            control.cadastrar();
            new Alert(AlertType.INFORMATION, 
                "Ficha Médica gravado com sucesso", 
                            ButtonType.OK).show();
        });

        Button btnPesquisar = new Button("Pesquisar");

        btnPesquisar.setOnAction( evento -> {
            control.pesquisarFichaMedica();
        });

        paneBotoes.getChildren().addAll(btnSalvar, btnPesquisar);

        paneForm.add( paneBotoes, 0, 4, 2, 1);

        panePrincipal.setCenter( paneForm );

        stage.setScene(scn);
        stage.setTitle("Agenda de Ficha Médica");
        stage.show();
    }

    public static void main(String[] args) {
        Application.launch(FichaMedicaBoundary.CLASS, args);
    }
}
