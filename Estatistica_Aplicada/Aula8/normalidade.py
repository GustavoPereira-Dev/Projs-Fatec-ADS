# -*- coding: utf-8 -*-
"""normalidade.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZzbqVLJNjXZ9_hiBP443VAiwpWUQiYqC
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

dados = pd.read_csv('/content/drive/MyDrive/Aulas Estatística (Python)/2º Bimestre/pesquisa_tratada.csv',
                    sep=",", encoding='iso-8859-1')
dados.head()

dados.shape

"""## **TESTES DE NORMALIDADE**

Vários métodos de estimação e testes de hipóteses foram criados sob a suposição de que a amostra aleatória tenha distribuição normal

TESTES DE NORMALIDADE

Existem testes de normalidade numéricos e testes gráficos:

Shapiro-Wilk (limite de 5000 amostras)

Kolmogorov_Smirnov

Histograma

QQplot

### Histograma
"""

import plotly.express as px
grafico =  px.histogram (dados,  x = "num_calcado", nbins=6, histnorm='probability',)
grafico.update_layout(width=400,height=400,title_text='Distribuição')
grafico.show()

import plotly.express as px
grafico =  px.histogram (dados,  x = "altura", nbins=7, histnorm='probability',)
grafico.update_layout(width=400,height=400,title_text='Distribuição')
grafico.show()

"""### QQPLOT"""

import scipy.stats as stats
import matplotlib.pyplot as plt

stats.probplot(dados['num_calcado'], dist="norm", plot=plt)
plt.title("Normal Q-Q plot")
plt.show()

stats.probplot(dados['altura'], dist="norm", plot=plt)
plt.title("Normal Q-Q plot")
plt.show()

"""### Teste de Shapiro-Wilk

CRITÉRIOS:

NÍVEL DE SIGNIFICÂNCIA DE 0,05 ou 5% (MAIS UTILIZADO)

Aceita Ho: p >= 0,05 (distribuição normal).

Rejeita Ho: p < 0,05 (distribuição não normal).
"""

stats.shapiro(dados.num_calcado)

"""O teste de Shapiro_Wilk não se aplica a dados maiores que 5000."""

stats.shapiro(dados.altura)

"""### Teste Lilliefors (Kolmogorov-Smirnov)"""

import statsmodels
from statsmodels.stats.diagnostic import lilliefors

statsmodels.stats.diagnostic.lilliefors(dados.num_calcado, dist = 'norm')

# Teste Lilliefors (Kolmogorov_Sminorv)
statsmodels.stats.diagnostic.lilliefors(dados.altura, dist = 'norm')