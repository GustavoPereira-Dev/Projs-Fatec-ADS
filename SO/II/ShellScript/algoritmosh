#!/bin/bash
#estSeq18.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2

dValor = 0

if [[ "$num1" -gt "$num2" ]]; then
    dValor = $(($num1 - $num2))
else
    dValor = $(($num2 - $num1))
fi

echo "A diferença entre os dois números é de ${dValor}"


#!/bin/bash
#estSeq19.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2


if [[ "$num1" -gt "$num2" ]]; then
    echo "o maior número é o primeiro com ${num1}"
else
    echo "o maior número é o segunfo com ${num2}"
fi


#!/bin/bash
#estSeq20.sh

read -p "Digite o valor de a: " a
read -p "Digite o valor de b: " b
read -p "Digite o valor de c: " c


delta =$(echo "($b * $b) - (4 * $a * $c)" | bc)
x0 =$(echo "($b + sqrt($delta)) / (2 * $a)" | bc)
x1 =$(echo "($b - sqrt($delta)) / (2 * $a)
" | bc)

if[[ "$delta" > 0 ]] then
   echo "O resultado de x0 é ${x0} e de x1 ${x1}"
else
   echo "Raiz inexistente e negativa"
fi




#!/bin/bash
#estSeq21.sh

read -p "Digite o valor da primeira nota: "  nota1
read -p "Digite o valor da segunda nota: "  nota2
read -p "Digite o valor da terceira nota: "  nota3
read -p "Digite o valor da quarta nota: "  nota4

media=$(echo "($nota1 + $nota2 + $nota3 + $nota4) / 4" | bc)

if [[ "$media" -gte 6.0 ]] then
   echo "APROVADO"
elif [[ "$media" -lt 3 ]] then
   echo "REPROVADO"
else
   echo "EXAME"


#!/bin/bash
#estSeq22.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2


if [[ "$num1" -gt "$num2" ]]; then
    echo "${num1} e ${num2}"
else
    echo "${num2} e ${num1}"
fi


#!/bin/bash
#estSeq23.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2
read -p "Digite o terceiro número: " num3
read -p "Digite o quarto número: " num4


if [ "$num4" -gt "$num3" ] then
  echo "A sequência dos números é na seguinte forma: ${num1} ${num2} ${num3} ${num4} "
elif [ "$num4" -gt "$num2" && "$num4" -lt "$num3" ] then
   echo "A sequência dos números é na seguinte forma: ${num1} ${num2} ${num4} ${num3} "
elif [ "$num4" -gt "$num1" && "$num4" -lt "$num2" ] then
    echo "A sequência dos números é na seguinte forma: ${num1} ${num4} ${num2} ${num3}"
else 
    echo "A sequência dos números é na seguinte forma: ${num4} ${num1} ${num2} ${num3}"
fi

#!/bin/bash
#estSeq24.sh

read -p "Digite o número: " num

if [ "$num" % 2 -eq 0 && "$num" % 3 -eq 0] ; then
 echo "O valor é divisível por 2 e 3"
else
 echo "O valor não é divisível por 2 e 3"
fi

#!/bin/bash
#estSeq25.sh

read -p "Digite a hora de início do jogo: " horaInicio
read -p "Digite os minutos de início do jogo: "  minInicio
read -p "Digite a hora de fim do jogo: " horaFim
read -p "Digite os minutos de fim do jogo: " minFim
		
if [ "$horaFim" - "$horaInicio" -lt 0 ] ; then
 duracaoHor=$(( ($horaFim - $horaInicio) + 24 ))
else
 duracaoHor=$(( $horaFim - $horaInicio ))
fi

if [ "$minFim" - "$minInicio" -lt 0 ] ; then
 duracaoMin=$(( ($minFim - $minInicio) + 60 ))
else 
 duracaoMin=$(($minFim - $minInicio))
fi

echo "A duração do jogo foi de ${duracaoHor} horas e ${duracaoMin} minutos"

#!/bin/bash
#estSeq26.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2
		
if [ "$num1" -gt "$num2" && "$num1" % "$num2" -eq 0 || "$num2" -gt "$num1" && "$num2" % "$num1" -eq 0 ] ; then
 echo "O maior número é múltiplo do menor"
else
 echo "O maior número não é múltiplo do menor"
fi

#!/bin/bash
#estSeq27.sh

read -p "Digite o número de voltas: " numVoltas
read -p "Digite a extensão do circuito: " extCirc
read -p "Digite o tempo de duração: " tempDur
		
distTotal=$(echo " ($extCirc * $numVoltas) / 1000) " | bc)
velMed=$(echo "$distTotal / $tempDur" | bc);
echo "A velocidade média pecorrida é: ${velMed} km/h"

#!/bin/bash
#estSeq28.sh

read -p "Digite o preço atual do produto: " prAtual
read -p "Digite a venda mensal do produto: " vendMen
		
if [ "$vendMen" -lt 500 && "$prAtual" -lt 30 ] ; then
 prNovo=$(echo "$prAtual + ($prAtual * 0.10" | bc)
elif [ "$vendMen" -gte 500 && "$vendMen" -lt 1000 && "$prAtual" -gt 30 && "$prAtual" -lt 80 ] ; then
 prNovo=$(echo "$prAtual + ($prAtual * 0.15)" | bc)
elif [ "$vendMen" -gte 1000 && "$prAtual" -gte 80 ] ; then
 prNovo=$(echo "$prAtual - ($prAtual * 0.05)" | bc)
else 
 prNovo=$prAtual;
fi
		
echo "O preço novo do produto é ${prNovo} reais "

#!/bin/bash
#estSeq29.sh

read -p "Digite o tipo de investimento (1 = poupança e 2 = renda fixa): " tipo
read -p "Digite o valor do investimento: " valor
		
case $tipo in
 1) investimento=$(echo "$valor + ($valor * 0.03)" | bc) ;;
 2) investimento=$(echo "$valor + ($valor * 0.05)" | bc) ;;
 *) investimento=$valor ;;
esac 
		
echo "O valor de investimento é ${investimento} reais "

#!/bin/bash
#estSeq30.sh

read -p "Digite o ano de nascimento: " anoNasc
read -p "Digite o mês de nascimento: " mesNasc
read -p "Digite o dia de nascimento: " diaNasc
read -p "Digite o ano atual: " anoAt
read -p "Digite o mês atual: " mesAt
read -p "Digite o dia atual: " diaAt
		
if [ $mesAt - $mesNasc -lt 0 ] ; then
 mesRes=$(( (mesAt - mesNasc) + 12 ))
 anoRes=$(( (anoAt - anoNasc) - 1 ))
else 
 mesRes=$(( (mesAt - mesNasc) ))
 anoRes=$(( (anoAt - anoNasc) ))
fi	
		
if [ "$diaAt" - "$diaNasc" -lt 0 ] ; then
 if [ "$anoAt" % 4 -eq 0 && "$anoAt" % 100 -ne 0 && "$mesAt" - 1 -eq 2 || "$anoAt" % 400 -eq 0 && "$anoAt" % 100 -eq 0 && "$mesAt" - 1 -eq 2 ] ; then
  diaRes=$(( ($diaAt - $diaNasc) + 29 ))
 elif [ "$anoAt" % 4 -eq 0 && "$anoAt" % 100 -eq 0 && "$mesAt" - 1 -eq 2 || "$anoAt" % 400 -ne 0 && "$anoAt" % 100 -ne 0 && "$mesAt" - 1 -eq 2 ] ; then
  diaRes=$(( ($diaAt - $diaNasc) + 28 ))
 elif [ "$mesAt" % 2 -eq 1 && "$mesAt" -lt 8 || "$mesAt" % 2 -eq 0 && "$mesAt" > 7 ] ; then
  diaRes=$(( ($diaAt - $diaNasc) + 30 ))
 else
  diaRes=$(( ($diaAt - $diaNasc) + 31 ))
 fi			
else
 diaRes=$(( $diaAt - $diaNasc ))
echo "O resultado de sua idade é de ${anoRes} anos, ${mesRes} mes(es) e ${diaRes} dia(s)"

#!/bin/bash
#estSeq31.sh

num=10
		
for i in {$num..150}; do 
 quadrado=$(( (num * num) ))
 echo "O quadrado de ${i} ao quadro é: ${quadrado} "
done

#!/bin/bash
#estSeq32.sh

read -p "Digite o número de fatorial: " num
		
for i in {$num..1..-2}; do
 fat=$(( $fat * (num * (num - 1)) ))
done

echo "O resultado do fatorial ${num}  é: ${fat} "

#!/bin/bash
#estSeq33.sh

read -p "Digite o número para sequência: " num
		
while [ "$indx" -lt "$num" ]; do
 indx=$(($indx + 1));
 seq=$(echo " $seq + (1 / $indx)" | bc)
done

echo "O resultado da sequência ${num} é: ${seq} "

#!/bin/bash
#estSeq34.sh

read -p "Digite o número para tabuada: " num
		
while [ "$indx" -lt 10 ]; do
 indx=$(($indx + 1))
 mult=$(($num * $indx));
 echo "${num} x ${indx} = ${mult} "
done

#!/bin/bash
#estSeq35.sh

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2
		
if [ "$num2" -gt "$num1" ] ; then
 indx=$num2
else
 indx=$num1
fi
		
while [ "$indx" -gte "$num1" || "$indx" -gte "$num2" ] ; then
 if [ "$indx" % 2 -eq 1 ] ; then
  res=$(( $res + $indx ))
 fi
 indx--;
done
		
echo "A somatória de números ímpares entre os dois é: ${res} "

#!/bin/bash
#estSeq36.sh

echo "Digite o número para sequência de fatorial: " num
		
if [ "$num" -lt 2 ] ; then
 fat=1
fi
		
while [ "$indx" -lt "$num" ] ; then
 indx=$(($indx + 1))
			
 for indxFat in $(seq $indx 1 -1); do
  fat=$(($fat + ($num * $num) ))
 done
 seq=$(echo "$seq + (1 / $fat) " | bc)
 fat=0
done
		
echo "O resultado da sequência de fatorial é: ${seq} "





#!/bin/bash
# estSeq37.sh
# Descrição: Recebe um número inteiro e mostra a série de Fibonacci até o n-ésimo termo
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

read -p "Digite o número para Fibonacci: " num

ant1=1
ant2=0
indx=1
fib=0

if [ "$num" -gt 1 ]; then
    while [ "$indx" -lt "$num" ]; do
        fib=$((ant1 + ant2))
        ant2=$ant1
        ant1=$fib
        indx=$((indx + 1))
    done
else
    fib=$num
fi

echo "O resultado da Fibonacci é: ${fib}"



#!/bin/bash
# estSeq38.sh
# Descrição: Recebe 100 números reais positivos e mostra o maior e o menor valor
# Data: 05/03/2024
# Programador: Gustavo Henrique
# Versão: 0.1

indx=1
maior=0
menor=0
first=1  # Flag para detectar o primeiro número válido

while [ "$indx" -le 100 ]; do
    read -p "Digite o número ($indx/100): " num

    # Verifica se é positivo
    if (( $(echo "$num >= 0" | bc -l) )); then
        if [ "$first" -eq 1 ]; then
            maior=$num
            menor=$num
            first=0
        else
            maior=$(echo "$num > $maior" | bc -l)
            if [ "$maior" -eq 1 ]; then
                maior=$num
            fi

            menor=$(echo "$num < $menor" | bc -l)
            if [ "$menor" -eq 1 ]; then
                menor=$num
            fi
        fi
        indx=$((indx + 1))
    else
        echo "Somente valores positivos são permitidos."
    fi
done

echo "O maior número entre os 100 é: $maior"
echo "O menor número entre os 100 é: $menor"



#!/bin/bash
# estSeq39.sh
# Descrição: Calcula a quantidade de grãos contidos em um tabuleiro de xadrez
#            Casa: 1 2 4 8 ... até a 64ª casa (2^0 até 2^63)
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

graos=1  # Começa com 1 grão na primeira casa

for ((casa=2; casa<=64; casa++)); do
    graos=$(echo "$graos * 2" | bc)
done

echo "O total de grãos no tabuleiro é: $graos"



#!/bin/bash
# estSeq40.sh
# Descrição: Recebe dois números inteiros e mostra todos os primos entre eles
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

read -p "Digite o primeiro número: " num1
read -p "Digite o segundo número: " num2

# Determina os limites corretos
if [ "$num1" -gt "$num2" ]; then
    ini=$num2
    fim=$num1
else
    ini=$num1
    fim=$num2
fi

echo "Números primos entre $ini e $fim:"

for ((i=ini; i<=fim; i++)); do
    if [ "$i" -lt 2 ]; then
        continue
    fi

    primo=1
    for ((j=2; j<=i/2; j++)); do
        if [ $((i % j)) -eq 0 ]; then
            primo=0
            break
        fi
    done

    if [ "$primo" -eq 1 ]; then
        echo "$i"
    fi
done






#!/bin/bash
# estSeq41.sh
# Descrição: Mostra todas as possibilidades de dois dados cuja soma é 7
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

pos=0

for ((num1=1; num1<=6; num1++)); do
    for ((num2=1; num2<=6; num2++)); do
        if [ $((num1 + num2)) -eq 7 ]; then
            echo "(${num1}, ${num2})"
            pos=$((pos + 1))
        fi
    done
done

echo "Total de possibilidades cuja soma é 7: $pos"




#!/bin/bash
# estSeq42.sh
# Descrição: Calcula e mostra a série 1 + 2/3 + 3/5 + ... + 50/99
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

num1=1
num2=1
res=0

while [ "$num1" -le 50 ]; do
    termo=$(echo "scale=8; $num1 / $num2" | bc -l)
    res=$(echo "scale=8; $res + $termo" | bc -l)

    num1=$((num1 + 1))
    num2=$((num2 + 2))
done

echo "O resultado da sequência até 50 é: $res"




#!/bin/bash
# estSeq43.sh
# Descrição: Calcula quantos anos são necessários para que Ana seja maior que Maria
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

ana=1.10    # Altura inicial de Ana (em metros)
maria=1.50  # Altura inicial de Maria (em metros)
anos=0

while (( $(echo "$ana <= $maria" | bc -l) )); do
    ana=$(echo "$ana + 0.03" | bc)
    maria=$(echo "$maria + 0.02" | bc)
    anos=$((anos + 1))
done

echo "Serão necessários ${anos} ano(s) para que Ana seja maior que Maria."




#!/bin/bash
# estSeq44.sh
# Descrição: Recebe a base e o expoente e calcula a potência (base^expoente)
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

read -p "Digite o valor da base: " base
read -p "Digite o valor do expoente: " exp

pot=1
for ((i=1; i<=exp; i++)); do
    pot=$((pot * base))
done

echo "O resultado de ${base} elevado à ${exp} é: ${pot}"




#!/bin/bash
# estSeq45.sh
# Descrição: Calcula a série 1^2/4 + 3/9^4/16 + ... até 15/225 com lógica baseada em expressão exponencial
# Data: 05/03/2024
# Programador: Gustavo Pereira
# Versão: 0.1

res=0
num2=0

for ((num1=1; num1<=15; num1++)); do
    num2=$((num2 + 1))

    # Prepara os componentes da expressão
    num2_plus_1=$(echo "$num2 + 1" | bc)
    num2_squared=$(echo "$num2 * $num2" | bc)
    num1_squared=$(echo "$num1 * $num1" | bc)

    # Calcula: exp(((num2 + 1) / num2²) * ln(num1) / num1²)
    termo=$(echo "scale=8; e(($num2_plus_1 / $num2_squared) * (l($num1) / $num1_squared))" | bc -l)
    res=$(echo "scale=8; $res + $termo" | bc -l)
done

echo "O resultado da sequência até 15 é: $res"